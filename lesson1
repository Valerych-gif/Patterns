Домашняя ERP система

******
Исходные данные:
Предполагаем, что ERP система позволяет управлять следующими ресурсами:
1. Трудовые ресурсы (ч/час)
2. Денежные ресурсы
3. Время

Есть один администратор системы и любое количество пользователей.
Администратор выдает пользователям право составлять планы или только их просматривать.
План состоит из задач.
У каждой задачи есть исполнитель, заложенные ресурсы и процент выполнения.
Общение с пользователем через WEB-интерфейс

******
Декомпозиция

Изначально разбиваем будущую программу на модель, контроллер и представление.

Модель хранит в себе все данные о задачах, ресурсах и пользователях, а также программный код для взаимодействия с ними.
Так как программа предназначена для домашнего использования, то считаю использование БД нецелесообразным, хранить
все будем в файлах рядом с исполняемым файлом. Модель смотрит наружу интерфейсом для взаимодействием с другими модулями,
поэтому модули не зависят от внутреннего устройства модели и мы всегда можем изменить ее реализацию, не затрагивая
никакого внешнего по отношению к ней кода.

Контроллер обеспечивает всю бизнес логику, он разбит на слои. Первый слой взаимодействует непосредственно
с представлением. Он получает задания от пользователя через представление и определяет какому сервису следует передать
ее обработку и передает. Вторым идет сервисный слой. Он обрабатывает запрос, обращается к модели и просит ее достать
или положить в файл некие данные. Результат возвращает на первый слой, а тот в представление.

Представление обеспечивает непосредственное взаимодействие с пользователем. С одной стороны представление отрисовывает
интерфейс, с другой позволяет при помощи WEB запросов выдавать команды контролеру.

Выбор шаблона MVC обоснован тем, что он позволяет менять каждый из его компонентов отдельно от других, что очень
пригодится при добавлении новых фич в будущем, например, если мы захотим сменить интерфейс приложения, то менять
придется только представление, модель и контроллер останутся нетронутыми.

При дальнейшем разбиении можно выделить отдельные контроллеры, отвечающие за администрирование, составление плана,
управление ресурсами и т.д. с соответствующими сервисными слоями.

В модели можно выделить отдельные сущности, такие как ресурс, задача или пользователь. Каждой сущности сопоставить
отдельный текстовый файл, содержащий по одной строке на каждого представителя данной сущности (10 задач = 10 строк)
******